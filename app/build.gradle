/*
 * Planet's Position
 * A program to calculate the position of the planets in the night sky based
 * on a given location on Earth.
 * Copyright (c) 2016 Tim Gaddis
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "planets.position"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 24
        versionName "2.0"
    }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/libs']
            java.srcDirs = ['src/main/java']
        }
    }

    buildTypes {
        release {
            def formattedDate = new Date().format('yyyyMMdd')
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix("-beta-" + formattedDate)
        }
        beta {
            def formattedDate = new Date().format('yyyyMMddHHmmss')
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix("-beta-" + formattedDate)
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def newName = output.outputFile.name
                    //newName = newName.replace("app-", "$rootProject.ext.appName-") //"MyAppName" -> I set my app variables in the root project
                    newName = newName.replace("-beta", "-beta_" + formattedDate)
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
    }
}

task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
    def ndkDir = project.getPlugins().getPlugin('android').sdkHandler.getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            '-C', file('src/main/jni').absolutePath
}
task cleanNative(type: Exec, description: 'Clean JNI object files') {
    def ndkDir = project.getPlugins().getPlugin('android').sdkHandler.getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            '-C', file('src/main/jni').absolutePath,
            'clean'
}
clean.dependsOn 'cleanNative'
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn buildNative
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.android.support:preference-v14:23.3.0'
    compile 'com.google.android.gms:play-services-location:8.4.0'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
}
